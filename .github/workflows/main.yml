name: Automatic tag for release

on:
  create:
      branches:
          - "*release*"
jobs:
  jobOne:
    runs-on: ubuntu-latest

    steps:
      - name: checkout the release branch created
        uses: actions/checkout@v3

      - name: get release reference
        id: get-version

        run: |
          branch=$(git for-each-ref --format="%(upstream:short)" $(git symbolic-ref -q BASE))
          # get version name from branch
          IFS="/" read -ra version_array <<< "$branch"
          VERSION_NUMBER="${version_array[2]}"

          # echo "::set-output name=version_number::$VERSION_NUMBER"
          echo "version_number=$VERSION_NUMBER" >> "$GITHUB_ENV"

      - name: checkout master to tag
        uses: actions/checkout@v3
        with:
          ref: master # here setup the branch reference it can be main or master

      - name: tag base branch after checkout

        run: |
          # branch=$(git for-each-ref --format="%(upstream:short)" $(git symbolic-ref -q HEAD))
          echo "This is the branch head: $branch"
          echo "this is head: $HEAD"
          # rutina para splitear la version que se puso en la ramona
          # IFS="/" read -ra version_array <<< "$branch"
          # version_number="${version_array[2]}"
          # echo "version number: $version_number"

          # recover previous step value
          # m_version=${{ steps.get-version.outputs.version_number }}
          m_version=$version_number

          # create tag
          tag_name="auto-release-tag-v$m_version"
          echo "This is the tag: $tag_name"
          git tag "$tag_name"
          git push origin "$tag_name"
          echo "Tag created for last release: $tag_name"

      - name: Change version number of main branch to next
        if: ${{ success() }}
        run: |
          # m_version=${{ steps.get-version.outputs.version_number }}
          m_version=$version_number

          echo "esta es la variable env: $m_version"
          # rutina para splitear el minor 
          IFS="." read -ra version_name_items <<< "$m_version"
          major="${version_name_items[0]}"
          minor="${version_name_items[1]}"
          patch="0"

          # rutina para sobreescribir 
          version_minor=$((((minor)) + 1))
          echo "esta es la minor aumentada: $version_minor"
          version_name="${major}.${version_minor}.${patch}"
          echo "esta es la v $version_name"

          # move directory
          cd PrintApp
          
          # sed -i "s/versionName [0-9]\+/versionName $version_name/" app/build.gradle
          sed -i "s/versionName \"[0-9.]\+\"/versionName \"$version_name\"/" app/build.gradle
          
          # commit changes
          git config user.email "mail@rccl.com"
          git config user.name "RCCL-automated versioning"
          git add app/build.gradle
          git commit -m "Application version name updated to $new_version_name"
          git push origin master
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false 


